// KORE specification
[]
module TEST
 // non-unique definitions
 sort LogicLevel{} []
 sort String{} []
 sort Int{} []
 symbol inj{SIn,SOut}(SIn): SOut []
 symbol info{S} (String{}, S): S [] // add meta info to asd node
 symbol input{}(Int{}, Int{}): String{} [] // holds parsed substring from start to end positions

 // definitions generated from user input
 sort Exp{}  []
 sort Stmt{} []
 sort Var{}  []

 symbol eq{}(Exp{}, Exp{}) : Exp{} []
 symbol lt{}(Exp{}, Exp{}) : Exp{} []
 symbol gt{}(Exp{}, Exp{}) : Exp{} []
 symbol it{}(Exp{}, Stmt{}) : Stmt{} []
 symbol ite{}(Exp{}, Stmt{}, Stmt{}) : Stmt{} []


 axiom{}
 \and{LogicLevel{}}(\equals{String{}, LogicLevel{}}(
     input{}(\dv{Int{}}("0"),\dv{Int{}}("1")), \dv{String{}}("if")),
 \and{LogicLevel{}}(\equals{String{}, LogicLevel{}}(
     input{}(\dv{Int{}}("3"),\dv{Int{}}("4")), \dv{String{}}("c1")),
 \and{LogicLevel{}}(\equals{String{}, LogicLevel{}}(
     input{}(\dv{Int{}}("6"),\dv{Int{}}("7")), \dv{String{}}("==")),
 \and{LogicLevel{}}(\equals{String{}, LogicLevel{}}(
     input{}(\dv{Int{}}("9"),\dv{Int{}}("10")), \dv{String{}}("c2")),
 \and{LogicLevel{}}(\equals{String{}, LogicLevel{}}(
     input{}(\dv{Int{}}("12"),\dv{Int{}}("15")), \dv{String{}}("then")),
 \and{LogicLevel{}}(\equals{String{}, LogicLevel{}}(
     input{}(\dv{Int{}}("17"),\dv{Int{}}("18")), \dv{String{}}("if")),
 \and{LogicLevel{}}(\equals{String{}, LogicLevel{}}(
     input{}(\dv{Int{}}("20"),\dv{Int{}}("21")), \dv{String{}}("c3")),
 \and{LogicLevel{}}(\equals{String{}, LogicLevel{}}(
     input{}(\dv{Int{}}("23"),\dv{Int{}}("23")), \dv{String{}}("<")),
 \and{LogicLevel{}}(\equals{String{}, LogicLevel{}}(
     input{}(\dv{Int{}}("25"),\dv{Int{}}("26")), \dv{String{}}("c4")),
 \and{LogicLevel{}}(\equals{String{}, LogicLevel{}}(
     input{}(\dv{Int{}}("28"),\dv{Int{}}("31")), \dv{String{}}("then")),
 \and{LogicLevel{}}(\equals{String{}, LogicLevel{}}(
     input{}(\dv{Int{}}("33"),\dv{Int{}}("34")), \dv{String{}}("s1")),
 \and{LogicLevel{}}(\equals{String{}, LogicLevel{}}(
     input{}(\dv{Int{}}("36"),\dv{Int{}}("39")), \dv{String{}}("else")),
 \and{LogicLevel{}}(\equals{String{}, LogicLevel{}}(
     input{}(\dv{Int{}}("41"),\dv{Int{}}("42")), \dv{String{}}("s2")),
 \exists{LogicLevel{}}(c1:Exp{},
 \exists{LogicLevel{}}(c2:Exp{},
 \exists{LogicLevel{}}(c3:Exp{},
 \exists{LogicLevel{}}(c4:Exp{},
 \exists{LogicLevel{}}(s1:Stmt{},
 \exists{LogicLevel{}}(s2:Stmt{},
    \and{LogicLevel{}}(
       \equals{Exp{}, LogicLevel{}}(c1:Exp{}, inj{Var{}, Exp{}}(\dv{Var{}}("c1"))),
       \and{LogicLevel{}}(
           \equals{Exp{}, LogicLevel{}}(c2:Exp{}, inj{Var{}, Exp{}}(\dv{Var{}}("c2"))),
           \and{LogicLevel{}}(
               \equals{Exp{}, LogicLevel{}}(c3:Exp{}, inj{Var{}, Exp{}}(\dv{Var{}}("c3"))),
               \and{LogicLevel{}}(
                  \equals{Exp{}, LogicLevel{}}(c4:Exp{}, inj{Var{}, Exp{}}(\dv{Var{}}("c4"))),
                  \and{LogicLevel{}}(
		     // note we inject straight from Var to Stmt, skipping Exp. We will want to do that
		     // if we can prove a transitive subsort.
                     \equals{Stmt{}, LogicLevel{}}(s1:Stmt{}, inj{Var{}, Stmt{}}(\dv{Var{}}("s1"))),
                     \and{LogicLevel{}}(
                         \equals{Stmt{}, LogicLevel{}}(s1:Stmt{}, inj{Var{}, Stmt{}}(\dv{Var{}}("s1"))),
		         \or{LogicLevel{}}(
                            inj{Stmt{}, LogicLevel{}}(
                                it{}(eq{}(c1:Exp{}, c2:Exp{}),
			             ite{}(lt{}(c3:Exp{}, c4:Exp{}), s1:Stmt{}, s2:Stmt{})
			        )
			    ),
                            inj{Stmt{}, LogicLevel{}}(
                                ite{}(eq{}(c1:Exp{}, c2:Exp{}),
		    	             it{}(lt{}(c3:Exp{}, c4:Exp{}), s1:Stmt{}),
		    	             s2:Stmt{}
		      	        )
			    )
		         )
		     )
	         )
              )
          )
       )
    )
 ))))))))))))))))))) []
// 0123456789012345678901234567890123456789012
// if c1 == c2 then if c3 < c4 then s1 else s2
// if c1 == c2 then (if c3 < c4 then s1 else s2)
// if c1 == c2 then (if c3 < c4 then s1) else s2
endmodule []

