// KORE specification
[]
module TEST
 sort Stmt{} []
 sort Exp{} []
 sort Int{} []
 sort Type{} []
 sort Var{} []
 sort LogicLevel{} []

 symbol inj{SIn,SOut}(SIn): SOut []
 
 symbol tstmt{}(Type{}, Exp{}): Stmt{} []
 symbol stmt{}(Exp{}): Stmt{} []
 symbol rshift{}(Exp{}, Exp{}): Exp{} []
 symbol lt{}(Exp{}, Exp{}): Exp{} []
 symbol ptype{}(Type{}, Type{}): Type{} []

 axiom{}
\exists{LogicLevel{}}(Foo:Exp{}, 
\exists{LogicLevel{}}(HashSet:Type{},
\exists{LogicLevel{}}(String:Type{},
\exists{LogicLevel{}}(HashSetE:Exp{},
\exists{LogicLevel{}}(StringE:Exp{},
  \and{LogicLevel{}}(
     \equals{Exp{}, LogicLevel{}}(Foo:Exp{}, inj{Var{}, Exp{}}(\dv{Var{}}("Foo"))),
     \and{LogicLevel{}}(
        \equals{Type{}, LogicLevel{}}(HashSet:Type{}, \dv{Type{}}("HashSet")),
	   \and{LogicLevel{}}(
	      \equals{Type{}, LogicLevel{}}(String:Type{}, \dv{Type{}}("String")),
              \or{LogicLevel{}}(
	         inj{Stmt{}, LogicLevel{}}(
                    tstmt{}(
	     	       ptype{}(HashSet:Type{}, ptype{}(HashSet:Type{}, String:Type{})),
		       Foo:Exp{}
	            )
		 ),
              	 \or{LogicLevel{}}(
	            inj{Stmt{}, LogicLevel{}}(
                       stmt{}(
		          rshift{}(lt{}(lt{}(HashSetE:Exp{}, HashSetE:Exp{}), StringE:Exp{}), Foo:Exp{})
	               )
		    ),
		    \or{LogicLevel{}}(
	               inj{Stmt{}, LogicLevel{}}(
                          stmt{}(
		             rshift{}(lt{}(HashSetE:Exp{}, lt{}(HashSetE:Exp{}, StringE:Exp{})), Foo:Exp{})
	                  )
		       ),
		       \or{LogicLevel{}}(
	                  inj{Stmt{}, LogicLevel{}}(
                             stmt{}(
		                lt{}(HashSetE:Exp{}, rshift{}(lt{}(HashSetE:Exp{}, StringE:Exp{}), Foo:Exp{}))
	                     )
		          ),
		          \or{LogicLevel{}}(
	                     inj{Stmt{}, LogicLevel{}}(
                                stmt{}(
		                   lt{}(lt{}(HashSetE:Exp{}, HashSetE:Exp{}), rshift{}(StringE:Exp{}, Foo:Exp{}))
	                        )
		             ),
	                     inj{Stmt{}, LogicLevel{}}(
                                stmt{}(
		                   lt{}(HashSetE:Exp{}, lt{}(HashSetE:Exp{}, rshift{}(StringE:Exp{}, Foo:Exp{})))
	                        )
			     )
			  )
                       )
		    )
	         )
	      )
           )
        )
     )
  )
)
) 
)
)
[]

// templated type parse
// HashSet<HashSet<String>> Foo; 

// lt/rshift parses
// ((HashSet < HashSet) < String) >> Foo;
// (HashSet < (HashSet < String)) >> Foo;
// HashSet < ((HashSet < String) >> Foo);
// (HashSet < HashSet) < (String >> Foo);
// HashSet < (HashSet < (String >> Foo));

endmodule []

